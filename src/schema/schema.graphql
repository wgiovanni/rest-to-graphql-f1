type Query {
    "Lista de las temporadas de Formula 1. De 1950 a la actualidad"
    seasonsList: [Season!]!
    """ 
    Obtenemos la informacion de las carreras seleccionadas por año.
    Tener en cuenta que solo existe temporadas desde 1950 a la actualidad.
    """
    racesByYear(year: String!): [Race!]!
    "Carrera seleccionada por año y por numero de carrera"
    raceSelect(year: String!, round: Int!): Race
    """ 
    Lista de los pilotos de la F1 de toda la historia.
    Tenemos dos opciones:
    Por un lado podemos obtener todos los pilotos
    Por otro lado, hacemos uso de la paginacion y podemos limitar el numero de resultados.
    """
    historyDrivers(pageElements: Int, page: Int): [Driver!]!
    """ 
    Obtenemos la informacion de los pilotos seleccionados por año.
    Tener en cuenta que solo existe temporadas desde 1950 a la actualidad.
    """
    driversYear(year: String!): [Driver!]!
    """ 
    Obtenemos la informacion de los pilotos seleccionados por año y numero de carrera.
    Tener en cuenta que solo existe temporadas desde 1950 a la actualidad.
    """
    driversYearAndRound(year: String!, round: Int!): [Driver!]!
    "Obtenemos la informacion del piloto mediante el valor 'id'"
    driverSelect(id: String!): Driver
    "Clasificacion final de los pilotoa de un temporada"
    seasonsPilotsRanking(year: String!): [DriverStanding!]!
    "Circuitos historicos"
    historyCircuits(pageElements: Int, page: Int): [Circuit!]!
    "Circuito seleccionado"
    circuitSelect(id: String!): Circuit
}

type Mutation {
    add(value: String!): [String]
}
"Informacion de la temporada"
type Season {
    "Año de la temporada"
    year: String!
    "Informacion de wikipedia"
    url: String!
    "Informacion de wikipedia adaptada a los dispositivos moviles"
    urlMobile: String!
}

type Race {
    season: String!
    round: String!
    url: String!
    urlMobile: String!
    name: String!
    circuit: Circuit!
    date: String!
    time: String
}

type Circuit {
    id: String!
    url: String!
    urlMobile: String!
    name: String!
    location: Location!
}

type Location {
    lat: String!
    long: String!
    locality: String!
    country: String!
}

type Driver {
    id: String!
    url: String!
    urlMobile: String!
    name: String!
    dateOfBirth: String!
    nationality: String!
    code: String
    permanentNumber: String
}

type DriverStanding {
    position: String!
    positionText: String!
    points: String!
    wins: String!
    driver: Driver!
    constructors: [Constructor!]!
}

type Constructor {
    id: String!
    url: String!
    urlMobile: String!
    name: String!
    nationality: String!
}
